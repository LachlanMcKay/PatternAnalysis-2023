import torch
import torchvision.transforms as transforms
import torch.nn as nn
import torch.nn.functional as F

class BasicBlock(nn.Module):
    expansion = 1

    def __init__(self, in_planes, planes, stride=1):
        super(BasicBlock, self).__init__()
        # standard two convolution layer for RESNET model 3x3 with planes size filter
        self.conv1 = nn.Conv2d(
            in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3,
                                stride=1, padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(planes)

        self.shortcut = nn.Sequential()
        # connection need to adjust the output if meet the requirement
        # basically an extra layer adjust the shortcut connection when necessary
        # to ensure compatibility with the output of the convolutional layers
        if stride != 1 or in_planes != self.expansion * planes:
            self.shortcut = nn.Sequential(
                nn.Conv2d(in_planes, self.expansion*planes,
                            kernel_size=1, stride=stride, bias=False),
                nn.BatchNorm2d(self.expansion*planes)
            )
    
    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x))) # Relu Activation -> introduce non linear and learn complex pattern
        out = self.bn2(self.conv2(out))
        out += self.shortcut(x)
        out = F.relu(out)
        return out

class ResNetSiamese(nn.Module):
    def __init__(self, block, num_blocks, num_classes=10):
        super(ResNetSiamese, self).__init__()
        self.in_planes = 64

        # initial convolution layer that take in 3 channel -> 64 x 3 x 3
        self.conv1 = nn.Conv2d(3, 64, kernel_size=3,
                                stride=1, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(64)
        # conv -> 3x3x64 (two of those) -> repeated for ResNet 18
        self.layer1 = self._make_layer(block, 64, num_blocks[0], stride=1)
        # conv -> 3x3x128
        self.layer2 = self._make_layer(block, 128, num_blocks[1], stride=2)
        # conv -> 3x3x256
        self.layer3 = self._make_layer(block, 256, num_blocks[2], stride=2)
        # conv -> 3x3x512
        self.layer4 = self._make_layer(block, 512, num_blocks[3], stride=2)
        # Dense layer
        # self.linear = nn.Linear(512*block.expansion, num_classes)

        self.fv = nn.Sequential(
            nn.Flatten(),
            nn.Linear(4608, 8192),
            nn.ReLU(inplace=True),
            nn.Linear(8192, 8192),
            nn.ReLU(inplace=True),
            nn.Linear(8192, 4096)
        )

    def _make_layer(self, block, planes, num_blocks, stride):
        strides = [stride] + [1]*(num_blocks-1)
        layers = []
        for stride in strides: # layers depends on the num_blocks -> determine based on type of ResNet, i.e. ResNet-18
            layers.append(block(self.in_planes, planes, stride))
            self.in_planes = planes * block.expansion
        return nn.Sequential(*layers)

    def forward(self, x):
        # RELU activation on the layer
        out = F.relu(self.bn1(self.conv1(x)))
        out = self.layer1(out) # -> batchNorm and activation apply at block
        out = self.layer2(out)
        out = self.layer3(out)
        out = self.layer4(out)
        # Pooling layers => reduce the dimensions => reduces the number of parameters to learn
        # Summarises the features present in region  generated by a convolution layer.
        out = F.avg_pool2d(out, 4)
        # Flatten before apply Dense layer
        # out = out.view(out.size(0), -1)
        out = self.fv(out)
        return out

def ResNet18Siamese():
    return ResNetSiamese(BasicBlock, [2, 2, 2, 2])

class RawSiameseModel(nn.Module):
    def __init__(self):
        super(RawSiameseModel, self).__init__()
        # Follow https://www.cs.cmu.edu/~rsalakhu/papers/oneshot1.pdf -> Siamese Neural Networks for One-shot Image Recognition
        # first convolution layer
        self.model1 = nn.Sequential(
            nn.Conv2d(in_channels=3, out_channels=64, kernel_size=10, stride=1),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2)
        )

        self.model2 = nn.Sequential(
            nn.Conv2d(in_channels=64, out_channels=128, kernel_size=7, stride=1),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2)
        )

        self.model3 = nn.Sequential(
            nn.Conv2d(in_channels=128, out_channels=128, kernel_size=4, stride=1),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2)
        )

        self.model4 = nn.Sequential(
            nn.Conv2d(in_channels=128, out_channels=256, kernel_size=4, stride=1),
            nn.ReLU(),
            nn.Flatten(),
            nn.Linear(256 * 6 * 6, 4096),
        )

    def forward(self, x):
        output = self.model1(x)
        output = self.model2(output)
        output = self.model3(output)
        output = self.model4(output)

        return output

class SiameseModel(nn.Module): # may not need this

    def __init__(self):
        super(SiameseModel, self).__init__()
        # Follow https://www.cs.cmu.edu/~rsalakhu/papers/oneshot1.pdf -> Siamese Neural Networks for One-shot Image Recognition
        # temporary separate to two class -> considered combine later
        self.base_model = RawSiameseModel()

        self.final_connect_layer = nn.Sequential(
            nn.Linear(4096, 1),
            nn.Sigmoid()
        )
    
    def forward(self, img1, img2):
        output1 = self.base_model(img1)
        output2 = self.base_model(img2)
        
        output = torch.abs(output1 - output2)
        output = self.final_connect_layer(output)

        return output

class BinaryModelClassifier(nn.Module):

    def __init__(self):
        super(BinaryModelClassifier, self).__init__()

        # dummy linear layer
        self.binary_layer = nn.Sequential(
            nn.Linear(4096, 1024),
            nn.ReLU(),
            nn.Linear(1024, 128),
            nn.ReLU(),
            nn.Linear(128, 1),
            nn.Sigmoid()
        )

    def forward(self, x):
        output = self.binary_layer(x)
        return output

class ContrastiveLossFunction(nn.Module):
    # custom loss function based on https://www.kaggle.com/code/robinreni/signature-classification-using-siamese-pytorch
    def __init__(self):
        super(ContrastiveLossFunction, self).__init__()
        self.margin = 0.2

    def forward(self, output1, output2, label): 
        output = F.pairwise_distance(output1, output2)
        loss_contrastive = torch.mean((1-label) * torch.pow(output, 2) + (label) * torch.pow(torch.clamp(self.margin - output, min=0.0), 2))

        return loss_contrastive